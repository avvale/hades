
type OAuthApplication
{
    id: ID!
    name: GraphQLString!
    code: GraphQLString!
    secret: GraphQLString!
    isMaster: GraphQLBoolean!
    clients: [OAuthClient]
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
}

input OAuthCreateApplicationInput
{
    id: ID!
    name: GraphQLString!
    code: GraphQLString!
    secret: GraphQLString!
    isMaster: GraphQLBoolean!
    clientIds: [ID]
}

input OAuthUpdateApplicationInput
{
    id: ID!
    name: GraphQLString
    code: GraphQLString
    secret: GraphQLString
    isMaster: GraphQLBoolean
    clientIds: [ID]
}

type Query
{
    oAuthFindApplication(query:QueryStatement constraint:QueryStatement): OAuthApplication
    oAuthFindApplicationById(id:ID constraint:QueryStatement): OAuthApplication
    oAuthGetApplications(query:QueryStatement constraint:QueryStatement): [OAuthApplication]!
    oAuthPaginateApplications(query:QueryStatement constraint:QueryStatement): Pagination!
}

type Mutation
{
    oAuthCreateApplication(payload: OAuthCreateApplicationInput!): OAuthApplication
    oAuthCreateApplications(payload: [OAuthCreateApplicationInput]!): Boolean!
    oAuthUpdateApplication(payload: OAuthUpdateApplicationInput! constraint:QueryStatement): OAuthApplication
    oAuthDeleteApplicationById(id: ID! constraint:QueryStatement): OAuthApplication
    oAuthDeleteApplications(query:QueryStatement constraint:QueryStatement): [OAuthApplication]!
}