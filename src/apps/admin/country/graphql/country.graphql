
type AdminCountry
{
    id: ID!
    commonId: ID!
    langId: ID!
    lang: AdminLang!
    iso3166Alpha2: GraphQLString!
    iso3166Alpha3: GraphQLString!
    iso3166Numeric: GraphQLString!
    customCode: GraphQLString
    prefix: GraphQLString
    name: GraphQLString!
    slug: GraphQLString!
    image: GraphQLString
    sort: GraphQLInt
    administrativeAreaLevel1: GraphQLString
    administrativeAreaLevel2: GraphQLString
    administrativeAreaLevel3: GraphQLString
    administrativeAreas: JSON
    latitude: GraphQLFloat
    longitude: GraphQLFloat
    zoom: GraphQLInt
    dataLang: JSON
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
}

input AdminCreateCountryInput
{
    id: ID!
    commonId: ID!
    langId: ID!
    iso3166Alpha2: GraphQLString!
    iso3166Alpha3: GraphQLString!
    iso3166Numeric: GraphQLString!
    customCode: GraphQLString
    prefix: GraphQLString
    name: GraphQLString!
    slug: GraphQLString!
    image: GraphQLString
    sort: GraphQLInt
    administrativeAreaLevel1: GraphQLString
    administrativeAreaLevel2: GraphQLString
    administrativeAreaLevel3: GraphQLString
    administrativeAreas: JSON
    latitude: GraphQLFloat
    longitude: GraphQLFloat
    zoom: GraphQLInt
    dataLang: JSON
}

input AdminUpdateCountryInput
{
    id: ID!
    commonId: ID
    langId: ID
    iso3166Alpha2: GraphQLString
    iso3166Alpha3: GraphQLString
    iso3166Numeric: GraphQLString
    customCode: GraphQLString
    prefix: GraphQLString
    name: GraphQLString
    slug: GraphQLString
    image: GraphQLString
    sort: GraphQLInt
    administrativeAreaLevel1: GraphQLString
    administrativeAreaLevel2: GraphQLString
    administrativeAreaLevel3: GraphQLString
    administrativeAreas: JSON
    latitude: GraphQLFloat
    longitude: GraphQLFloat
    zoom: GraphQLInt
    dataLang: JSON
}

type Query
{
    adminFindCountry(query:QueryStatement constraint:QueryStatement): AdminCountry
    adminFindCountryById(id:ID constraint:QueryStatement): AdminCountry
    adminGetCountries(query:QueryStatement constraint:QueryStatement): [AdminCountry]!
    adminPaginateCountries(query:QueryStatement constraint:QueryStatement): Pagination!
}

type Mutation
{
    adminCreateCountry(payload: AdminCreateCountryInput!): AdminCountry
    adminCreateCountries(payload: [AdminCreateCountryInput]!): Boolean!
    adminUpdateCountry(payload: AdminUpdateCountryInput! constraint:QueryStatement): AdminCountry
    adminDeleteCountryById(id: ID! constraint:QueryStatement): AdminCountry
    adminDeleteCountries(query:QueryStatement constraint:QueryStatement): [AdminCountry]!
}