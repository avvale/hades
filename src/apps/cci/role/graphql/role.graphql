

type CciRole
{
    id: ID!
    tenant: IamTenant!
    tenantCode: GraphQLString!
    name: GraphQLString!
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
    
}

input CciCreateRoleInput
{
    id: ID!
    tenantId: ID!
    tenantCode: GraphQLString!
    name: GraphQLString!
    
}

input CciUpdateRoleInput
{
    id: ID!
    tenantId: ID
    tenantCode: GraphQLString
    name: GraphQLString
    
}

type Query 
{
    cciFindRole(query:QueryStatement constraint:QueryStatement): CciRole
    cciFindRoleById(id:ID constraint:QueryStatement): CciRole
    cciGetRoles(query:QueryStatement constraint:QueryStatement): [CciRole]!
    cciPaginateRoles(query:QueryStatement constraint:QueryStatement): Pagination!
}

type Mutation
{
    cciCreateRole(payload: CciCreateRoleInput!): CciRole
    cciCreateRoles(payload: [CciCreateRoleInput]!): Boolean!
    cciUpdateRole(payload: CciUpdateRoleInput! constraint:QueryStatement): CciRole
    cciDeleteRoleById(id: ID! constraint:QueryStatement): CciRole
    cciDeleteRoles(query:QueryStatement constraint:QueryStatement): [CciRole]!
}
