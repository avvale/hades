
enum CciChannelDirection {
    SENDER
    RECEIVER
        
}
enum CciChannelAdapterStatus {
    ACTIVE
    INACTIVE
        
}

type CciChannel
{
    id: ID!
    hash: GraphQLString!
    tenant: IamTenant!
    tenantCode: GraphQLString!
    system: CciSystem!
    systemName: GraphQLString!
    party: GraphQLString
    component: GraphQLString!
    name: GraphQLString!
    flowHash: GraphQLString
    flowParty: GraphQLString
    flowReceiverParty: GraphQLString
    flowComponent: GraphQLString
    flowReceiverComponent: GraphQLString
    flowInterfaceName: GraphQLString
    flowInterfaceNamespace: GraphQLString
    version: GraphQLString
    adapterType: GraphQLString
    direction: CciChannelDirection
    transportProtocol: GraphQLString
    messageProtocol: GraphQLString
    adapterEngineName: GraphQLString
    url: GraphQLString
    username: GraphQLString
    remoteHost: GraphQLString
    remotePort: GraphQLInt
    directory: GraphQLString
    fileSchema: GraphQLString
    proxyHost: GraphQLString
    proxyPort: GraphQLInt
    destination: GraphQLString
    adapterStatus: CciChannelAdapterStatus
    softwareComponentName: GraphQLString
    responsibleUserAccountName: GraphQLString
    lastChangeUserAccount: GraphQLString
    lastChangedAt: GraphQLTimestamp
    riInterfaceName: GraphQLString
    riInterfaceNamespace: GraphQLString
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
    
}

input CciCreateChannelInput
{
    id: ID!
    hash: GraphQLString!
    tenantId: ID!
    tenantCode: GraphQLString!
    systemId: ID!
    systemName: GraphQLString!
    party: GraphQLString
    component: GraphQLString!
    name: GraphQLString!
    flowHash: GraphQLString
    flowParty: GraphQLString
    flowReceiverParty: GraphQLString
    flowComponent: GraphQLString
    flowReceiverComponent: GraphQLString
    flowInterfaceName: GraphQLString
    flowInterfaceNamespace: GraphQLString
    version: GraphQLString
    adapterType: GraphQLString
    direction: CciChannelDirection
    transportProtocol: GraphQLString
    messageProtocol: GraphQLString
    adapterEngineName: GraphQLString
    url: GraphQLString
    username: GraphQLString
    remoteHost: GraphQLString
    remotePort: GraphQLInt
    directory: GraphQLString
    fileSchema: GraphQLString
    proxyHost: GraphQLString
    proxyPort: GraphQLInt
    destination: GraphQLString
    adapterStatus: CciChannelAdapterStatus
    softwareComponentName: GraphQLString
    responsibleUserAccountName: GraphQLString
    lastChangeUserAccount: GraphQLString
    lastChangedAt: GraphQLTimestamp
    riInterfaceName: GraphQLString
    riInterfaceNamespace: GraphQLString
    
}

input CciUpdateChannelInput
{
    id: ID!
    hash: GraphQLString
    tenantId: ID
    tenantCode: GraphQLString
    systemId: ID
    systemName: GraphQLString
    party: GraphQLString
    component: GraphQLString
    name: GraphQLString
    flowHash: GraphQLString
    flowParty: GraphQLString
    flowReceiverParty: GraphQLString
    flowComponent: GraphQLString
    flowReceiverComponent: GraphQLString
    flowInterfaceName: GraphQLString
    flowInterfaceNamespace: GraphQLString
    version: GraphQLString
    adapterType: GraphQLString
    direction: CciChannelDirection
    transportProtocol: GraphQLString
    messageProtocol: GraphQLString
    adapterEngineName: GraphQLString
    url: GraphQLString
    username: GraphQLString
    remoteHost: GraphQLString
    remotePort: GraphQLInt
    directory: GraphQLString
    fileSchema: GraphQLString
    proxyHost: GraphQLString
    proxyPort: GraphQLInt
    destination: GraphQLString
    adapterStatus: CciChannelAdapterStatus
    softwareComponentName: GraphQLString
    responsibleUserAccountName: GraphQLString
    lastChangeUserAccount: GraphQLString
    lastChangedAt: GraphQLTimestamp
    riInterfaceName: GraphQLString
    riInterfaceNamespace: GraphQLString
    
}

type Query 
{
    cciFindChannel(query:QueryStatement constraint:QueryStatement): CciChannel
    cciFindChannelById(id:ID constraint:QueryStatement): CciChannel
    cciGetChannels(query:QueryStatement constraint:QueryStatement): [CciChannel]!
    cciPaginateChannels(query:QueryStatement constraint:QueryStatement): Pagination!
}

type Mutation
{
    cciCreateChannel(payload: CciCreateChannelInput!): CciChannel
    cciCreateChannels(payload: [CciCreateChannelInput]!): Boolean!
    cciUpdateChannel(payload: CciUpdateChannelInput! constraint:QueryStatement): CciChannel
    cciDeleteChannelById(id: ID! constraint:QueryStatement): CciChannel
    cciDeleteChannels(query:QueryStatement constraint:QueryStatement): [CciChannel]!
}
