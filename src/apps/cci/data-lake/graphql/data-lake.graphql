
type CciDataLake
{
    id: ID!
    tenantId: ID!
    tenant: IamTenant!
    executionId: ID!
    execution: CciExecution!
    tenantCode: GraphQLString!
    payload: JSON!
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
}

input CciCreateDataLakeInput
{
    id: ID!
    tenantId: ID!
    executionId: ID!
    tenantCode: GraphQLString!
    payload: JSON!
}

input CciUpdateDataLakeInput
{
    id: ID!
    tenantId: ID
    executionId: ID
    tenantCode: GraphQLString
    payload: JSON
}

type Query
{
    cciFindDataLake(query: QueryStatement constraint: QueryStatement): CciDataLake
    cciFindDataLakeById(id: ID constraint: QueryStatement): CciDataLake
    cciGetDataLakes(query: QueryStatement constraint: QueryStatement): [CciDataLake]!
    cciPaginateDataLakes(query: QueryStatement constraint: QueryStatement): Pagination!
}

type Mutation
{
    cciCreateDataLake(payload: CciCreateDataLakeInput!): CciDataLake
    cciCreateDataLakes(payload: [CciCreateDataLakeInput]!): Boolean!
    cciUpdateDataLake(payload: CciUpdateDataLakeInput! constraint: QueryStatement): CciDataLake
    cciDeleteDataLakeById(id: ID! constraint: QueryStatement): CciDataLake
    cciDeleteDataLakes(query: QueryStatement constraint: QueryStatement): [CciDataLake]!
}