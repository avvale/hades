
enum IamAccountType {
    USER
    SERVICE
        
}

type IamAccount
{
    id: ID!
    type: IamAccountType!
    name: GraphQLString!
    isActive: GraphQLBoolean!
    clientId: ID!
    applicationCodes: JSON!
    permissions: JSON!
    data: JSON
    roles: [IamRole]
    tenants: [IamTenant]
    user: IamUser
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
    
}

input IamCreateAccountInput
{
    id: ID!
    type: IamAccountType!
    name: GraphQLString!
    isActive: GraphQLBoolean!
    clientId: ID!
    applicationCodes: JSON!
    permissions: JSON!
    data: JSON
    roleIds: [ID]
    tenantIds: [ID]
    
}

input IamUpdateAccountInput
{
    id: ID!
    type: IamAccountType
    name: GraphQLString
    isActive: GraphQLBoolean
    clientId: ID
    applicationCodes: JSON
    permissions: JSON
    data: JSON
    roleIds: [ID]
    tenantIds: [ID]
    
}

type Query 
{
    iamFindAccount(query:QueryStatement): IamAccount
    iamFindMeAccount: IamAccount
    iamFindAccountById(id:ID): IamAccount
    iamGetAccounts(query:QueryStatement): [IamAccount]!
    iamPaginateAccounts(query:QueryStatement constraint:QueryStatement): Pagination!
}

type Mutation
{
    iamCreateAccount(payload: IamCreateAccountInput!): IamAccount
    iamCreateAccounts(payload: [IamCreateAccountInput]!): Boolean!
    iamUpdateAccount(payload: IamUpdateAccountInput!): IamAccount
    iamDeleteAccountById(id: ID!): IamAccount
    iamDeleteAccounts(query:QueryStatement): [IamAccount]!
}
