

type IamTenant
{
    id: ID!
    name: GraphQLString!
    code: GraphQLString!
    logo: GraphQLString
    isActive: GraphQLBoolean!
    data: JSON
    accounts: [IamAccount]
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
    
}

input IamCreateTenantInput
{
    id: ID!
    name: GraphQLString!
    code: GraphQLString!
    logo: GraphQLString
    isActive: GraphQLBoolean!
    data: JSON
    accountIds: [ID]
    
}

input IamUpdateTenantInput
{
    id: ID!
    name: GraphQLString
    code: GraphQLString
    logo: GraphQLString
    isActive: GraphQLBoolean
    data: JSON
    accountIds: [ID]
    
}

type Query 
{
    iamFindTenant(query:QueryStatement constraint:QueryStatement): IamTenant
    iamFindTenantById(id:ID constraint:QueryStatement): IamTenant
    iamGetTenants(query:QueryStatement constraint:QueryStatement): [IamTenant]!
    iamPaginateTenants(query:QueryStatement constraint:QueryStatement): Pagination!
}

type Mutation
{
    iamCreateTenant(payload: IamCreateTenantInput!): IamTenant
    iamCreateTenants(payload: [IamCreateTenantInput]!): Boolean!
    iamUpdateTenant(payload: IamUpdateTenantInput! constraint:QueryStatement): IamTenant
    iamDeleteTenantById(id: ID! constraint:QueryStatement): IamTenant
    iamDeleteTenants(query:QueryStatement constraint:QueryStatement): [IamTenant]!
}
