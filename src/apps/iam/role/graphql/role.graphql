

type IamRole
{
    id: ID!
    name: GraphQLString!
    isMaster: GraphQLBoolean!
    permissions: [IamPermission]
    accounts: [IamAccount]
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
    
}

input IamCreateRoleInput
{
    id: ID!
    name: GraphQLString!
    isMaster: GraphQLBoolean!
    permissionIds: [ID]
    accountIds: [ID]
    
}

input IamUpdateRoleInput
{
    id: ID!
    name: GraphQLString
    isMaster: GraphQLBoolean
    permissionIds: [ID]
    accountIds: [ID]
    
}

type Query 
{
    iamFindRole(query:QueryStatement): IamRole
    iamFindRoleById(id:ID): IamRole
    iamGetRoles(query:QueryStatement): [IamRole]!
    iamPaginateRoles(query:QueryStatement constraint:QueryStatement): Pagination!
}

type Mutation
{
    iamCreateRole(payload: IamCreateRoleInput!): IamRole
    iamCreateRoles(payload: [IamCreateRoleInput]!): Boolean!
    iamUpdateRole(payload: IamUpdateRoleInput!): IamRole
    iamDeleteRoleById(id: ID!): IamRole
    iamDeleteRoles(query:QueryStatement): [IamRole]!
}
