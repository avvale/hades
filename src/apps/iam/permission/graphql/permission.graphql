

type IamPermission
{
    id: ID!
    name: GraphQLString!
    boundedContext: IamBoundedContext!
    roles: [IamRole]
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
    
}

input IamCreatePermissionInput
{
    id: ID!
    name: GraphQLString!
    boundedContextId: ID!
    roleIds: [ID]
    
}

input IamUpdatePermissionInput
{
    id: ID!
    name: GraphQLString
    boundedContextId: ID
    roleIds: [ID]
    
}

type Query 
{
    iamFindPermission(query:QueryStatement): IamPermission
    iamFindPermissionById(id:ID): IamPermission
    iamGetPermissions(query:QueryStatement): [IamPermission]!
    iamPaginatePermissions(query:QueryStatement constraint:QueryStatement): Pagination!
}

type Mutation
{
    iamCreatePermission(payload: IamCreatePermissionInput!): IamPermission
    iamCreatePermissions(payload: [IamCreatePermissionInput]!): Boolean!
    iamUpdatePermission(payload: IamUpdatePermissionInput!): IamPermission
    iamDeletePermissionById(id: ID!): IamPermission
    iamDeletePermissions(query:QueryStatement): [IamPermission]!
}
